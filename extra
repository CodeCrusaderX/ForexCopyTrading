import streamlit as st
import requests
import json
from datetime import datetime
import uuid
import pandas as pd

ACCOUNTS_FILE = "accounts.json"
USERS_FILE = "users.json"
API_KEY = st.secrets["API_KEY"]
# --- Utilities ---
def load_accounts():
    with open(ACCOUNTS_FILE, "r") as file:
        return json.load(file)

def save_accounts(data):
    with open(ACCOUNTS_FILE, "w") as file:
        json.dump(data, file, indent=2)
# --- Load Users ---
def load_users():
    with open(USERS_FILE, "r") as f:
        return json.load(f)

USERS = load_users()
def get_live_price(base="EUR", quote="USD"):
    url = f"https://api.twelvedata.com/price?symbol={base}/{quote}&apikey={API_KEY}"
    try:
        response = requests.get(url)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        st.error(f"Error fetching live price: {e}")
        return "N/A"

def place_trade(direction, amount=100):
    data = load_accounts()
    price = get_live_price("EUR", "USD")
    trade_id = str(uuid.uuid4())[:8]

    trade = {
        "id": trade_id,
        "pair": "EUR/USD",
        "direction": direction,
        "amount": amount,
        "price": price,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "status": "open"
    }
    if direction.lower() == "buy":
        data["master"]["balance"] -= amount
        for client_data in data["clients"].values():
            client_data["balance"] -= amount

    for client_id, client_data in data["clients"].items():
        copied_trade = trade.copy()
        copied_trade["copied_from"] = "master"
        client_data["trades"].append(copied_trade)

    save_accounts(data)

def calculate_pnl(trade, current_price):
    try:
        entry_price = trade["price"]
        amount = trade["amount"]
        direction = trade["direction"]

        if direction.lower() == "buy":
            pnl = (current_price - entry_price) * amount
        elif direction.lower() == "sell":
            pnl = (entry_price - current_price) * amount
        else:
            pnl = 0
        return round(pnl, 2)
    except:
        return 0

# --- UI Starts Here ---
st.set_page_config(page_title="Forex Copy Trading Simulator", layout="wide")
st.title("📊 Forex Copy Trading Simulator")
st.markdown("""
Welcome to the Forex Copy Trading Simulator.  
This demo showcases how a master trader's actions are replicated across multiple clients with real-time profit/loss calculation.

🔹 Live price feed  
🔹 Trade replication  
🔹 Portfolio P&L  
🔹 CSV export of trades  
""")
col1, col2 = st.columns([2, 1])
with col1:
    price = get_live_price("EUR", "USD")
    st.metric("💱 EUR/USD Price", value=price)

with col2:
    st.write("### Place Trade (Master)")
    if st.button("🟢 Buy EUR/USD"):
        place_trade("buy")
        st.rerun()

    if st.button("🔴 Sell EUR/USD"):
        place_trade("sell")
        st.rerun()

# Accounts Overview
data = load_accounts()
st.write("## 🧾 Account Balances")
cols = st.columns(len(data["clients"]) + 1)
cols[0].metric("Master", f"${data['master']['balance']:.2f}")
for i, (cid, cdata) in enumerate(data["clients"].items(), start=1):
    cols[i].metric(cid.capitalize(), f"${cdata['balance']:.2f}")

# --- Master Trades Section ---
st.write("## 📜 Trade Log")
st.write("### 🧑‍🏫 Master Trades")
master_df = pd.DataFrame(data["master"]["trades"])
st.dataframe(master_df, use_container_width=True)

# ✅ Export Master CSV
master_csv = master_df.to_csv(index=False).encode("utf-8")
st.download_button(
    label="📤 Download Master Trades as CSV",
    data=master_csv,
    file_name="master_trades.csv",
    mime="text/csv"
)

# --- Client Trades Section ---
st.write("### 👥 Client Trades")
for cid, cdata in data["clients"].items():
    st.markdown(f"### 👤 {cid.capitalize()}")

    trades = cdata["trades"]
    enriched_trades = []
    total_pnl = 0

    for t in trades:
        pnl = calculate_pnl(t, price)
        total_pnl += pnl
        enriched_trades.append({
            "ID": t["id"],
            "Direction": t["direction"],
            "Amount": t["amount"],
            "Entry Price": t["price"],
            "Current Price": price,
            "P&L": pnl,
            "Time": t["timestamp"]
        })

    # ✅ Show portfolio summary
    color = "green" if total_pnl > 0 else "red" if total_pnl < 0 else "black"
    st.markdown(
        f"<h5>💼 Portfolio P&L: <span style='color:{color}'>{round(total_pnl, 2)}</span></h5>",
        unsafe_allow_html=True
    )

    client_df = pd.DataFrame(enriched_trades)

    # ✅ Style P&L column
    def color_pnl(val):
        return f"color: {'green' if val > 0 else 'red' if val < 0 else 'black'}; font-weight: bold"

    styled_df = client_df.style.applymap(color_pnl, subset=["P&L"])
    st.dataframe(styled_df, use_container_width=True)

    # ✅ Export Client CSV
    client_csv = client_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        label=f"📤 Download {cid.capitalize()} Trades as CSV",
        data=client_csv,
        file_name=f"{cid}_trades.csv",
        mime="text/csv"
    )

# --- Reset Button ---
if st.button("♻️ Reset Accounts"):
    with open(ACCOUNTS_FILE, "w") as file:
        json.dump({
            "master": {"balance": 10000, "trades": []},
            "clients": {
                "client1": {"balance": 5000, "trades": []},
                "client2": {"balance": 7500, "trades": []}
            }
        }, file, indent=2)
    st.success("Accounts reset.")